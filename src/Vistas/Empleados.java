/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vistas;


import entity.Empleado;
import entity.Persistencia;
import entity.Turno;
import entity.Usuario;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jpaController.EmpleadoJpaController;
import jpaController.TurnoJpaController;
import jpaController.UsuarioJpaController;



/**
 *
 * @author crist
 */
public class Empleados extends javax.swing.JPanel {
       private Persistencia persis;
       private Empleado empleado;
       private EmpleadoJpaController controlador_empleado;
       private List<Empleado> empleados;
       
    /**
     * Creates new form num1
     */
    public Empleados() {
        initComponents();
        styles();
        persis= new Persistencia();
        cargarEmpleados();
    }
    
    public void cargarEmpleados(){
        //Cargar los usuarios en la tabla
        controlador_empleado=new EmpleadoJpaController(persis.getEmf());
        empleados=controlador_empleado.findEmpleadoEntities();
        DefaultTableModel model= (DefaultTableModel) emple.getModel();
        model.setRowCount(0);
        
        empleados.forEach(emplead ->{
            String turno=emplead.getTurnoCollection().stream().map(
                    tur->
                            tur.getIdTurnoTipo().getDescripcion()).collect(Collectors.joining(", "));
            model.addRow(new Object[]{
                emplead.getIdEmpleado(),
                emplead.getNombre(),
                emplead.getApellidos(),
                turno,
                emplead.getIdUsuario().getIdRol().getIdRol(),
                emplead.getIdUsuario().getContrasena()
            });
        });
    }
    
    private void styles(){
       title.putClientProperty( "FlatLaf.style", "font: bold $h1.regular.font" );
        title.setForeground(Color.black);
         txtBuscador.putClientProperty("JTextField.placeholderText","Ingrese el nombre del doctor a buscar");
    }  
    private void eliminarEmpleadoCompleto(Empleado empleado, DefaultTableModel model, int fila) {
    try {
        // Inicializar controladores necesarios
        TurnoJpaController controladorTurno = new TurnoJpaController(persis.getEmf());
        UsuarioJpaController controladorUsuario = new UsuarioJpaController(persis.getEmf());
        
        // 1. ELIMINAR TURNOS PRIMERO (dependencias del empleado)
        List<Turno> turnosAEliminar = new ArrayList<>(empleado.getTurnoCollection());
        for (Turno turno : turnosAEliminar) {
            controladorTurno.destroy(turno.getIdTurno());
        }
        
        // 2. OBTENER REFERENCIA AL USUARIO ANTES DE ELIMINAR EMPLEADO
        Usuario usuarioAEliminar = empleado.getIdUsuario();
        Integer idUsuario = usuarioAEliminar != null ? usuarioAEliminar.getIdUsuario() : null;
        
        // 3. ELIMINAR EMPLEADO
        controlador_empleado.destroy(empleado.getIdEmpleado());
        
        // 4. ELIMINAR USUARIO (después del empleado para evitar problemas de FK)
        if (idUsuario != null) {
            try {
                controladorUsuario.destroy(idUsuario);
            } catch (Exception ex) {
                // Si hay error al eliminar usuario, informar pero continuar
                JOptionPane.showMessageDialog(this,
                    "Empleado eliminado, pero hubo un problema al eliminar el usuario: " + ex.getMessage(),
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
        
        // 5. ACTUALIZAR INTERFAZ
        model.removeRow(fila);
        
        JOptionPane.showMessageDialog(this,
            "Empleado, usuario y turnos eliminados exitosamente",
            "Eliminación exitosa",
            JOptionPane.INFORMATION_MESSAGE);
        
        // 6. RECARGAR TABLA PARA ASEGURAR CONSISTENCIA
        cargarEmpleados();
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
            "Error durante la eliminación: " + ex.getMessage() + 
            "\n\nEs posible que algunos datos no se hayan eliminado completamente.",
            "Error de eliminación",
            JOptionPane.ERROR_MESSAGE);
        
        // Recargar tabla para mostrar el estado actual
        cargarEmpleados();
    }
}
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenido = new javax.swing.JPanel();
        calendario = new javax.swing.JScrollPane();
        emple = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtBuscador = new javax.swing.JTextField();

        contenido.setBackground(new java.awt.Color(255, 255, 255));

        emple.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        emple.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Apellidos", "Turno", "Rol", "Contraseña"
            }
        ));
        emple.setCellSelectionEnabled(true);
        emple.setName(""); // NOI18N
        emple.setShowGrid(true);
        calendario.setViewportView(emple);
        emple.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Empleados");
        title.setToolTipText("");

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(0, 204, 204));
        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(51, 51, 51));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contenidoLayout = new javax.swing.GroupLayout(contenido);
        contenido.setLayout(contenidoLayout);
        contenidoLayout.setHorizontalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenidoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(contenidoLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contenidoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(calendario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenidoLayout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(txtBuscador)))
                .addGap(60, 60, 60))
        );
        contenidoLayout.setVerticalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenidoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscar)
                    .addGroup(contenidoLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtBuscador)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calendario, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevo)
                        .addComponent(btnBorrar))
                    .addComponent(btnEditar))
                .addGap(103, 103, 103))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
           // TODO add your handling code here:
               // 1. Verificar que hay una fila seleccionada
    int filaSeleccionada = emple.getSelectedRow();
    
    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this,
            "Debe seleccionar un empleado de la tabla para editar",
            "Aviso",
            JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // 2. Obtener el ID del empleado seleccionado
    DefaultTableModel model = (DefaultTableModel) emple.getModel();
    int idEmpleado = (Integer) model.getValueAt(filaSeleccionada, 0);
    String nombreActual = (String) model.getValueAt(filaSeleccionada, 1);
    String apellidosActual = (String) model.getValueAt(filaSeleccionada, 2);
    
    // 3. Mostrar ventana de confirmación antes de editar
    int confirmacion = JOptionPane.showConfirmDialog(this,
        "¿Desea editar la información del empleado?\n\n" +
        "Empleado actual: " + nombreActual + " " + apellidosActual + "\n" +
        "ID: " + idEmpleado,
        "Confirmar edición",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
    
    // 4. Si confirma, abrir ventana de edición
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            // Buscar el empleado completo en la base de datos
            Empleado empleadoAEditar = controlador_empleado.findEmpleado(idEmpleado);
            
            if (empleadoAEditar != null) {
                // Crear y mostrar ventana de edición pasando el empleado
                EditarEmpleado ventanaEditar = new EditarEmpleado(empleadoAEditar, this);
                MainAdmin.showJpane(ventanaEditar);
                
            } else {
                JOptionPane.showMessageDialog(this,
                    "No se encontró el empleado en la base de datos",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar los datos del empleado: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
             int filaSeleccionada = emple.getSelectedRow();
    
    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, 
            "Debe seleccionar un empleado de la tabla para eliminar", 
            "Aviso", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    DefaultTableModel model = (DefaultTableModel) emple.getModel();
    int idEmpleado = (Integer) model.getValueAt(filaSeleccionada, 0);
    String nombreEmpleado = (String) model.getValueAt(filaSeleccionada, 1);
    String apellidosEmpleado = (String) model.getValueAt(filaSeleccionada, 2);
    
    try {
        Empleado empleadoAEliminar = controlador_empleado.findEmpleado(idEmpleado);
        
        if (empleadoAEliminar == null) {
            JOptionPane.showMessageDialog(this,
                "No se encontró el empleado en la base de datos",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Obtener información de los datos relacionados
        int cantidadTurnos = empleadoAEliminar.getTurnoCollection().size();
        Usuario usuarioAsociado = empleadoAEliminar.getIdUsuario();
        String nombreUsuario = usuarioAsociado != null ? usuarioAsociado.getNombreU() : "Sin usuario";
        
        String mensaje = "¿Está seguro que desea eliminar al empleado?\n\n" +
                        "ID: " + idEmpleado + "\n" +
                        "Nombre: " + nombreEmpleado + " " + apellidosEmpleado + "\n" +
                        "Usuario: " + nombreUsuario + "\n\n" +
                        "ADVERTENCIA: Se eliminarán:\n" +
                        "• " + cantidadTurnos + " turno(s) asociado(s)\n" +
                        "• 1 usuario del sistema\n" +
                        "• El registro del empleado\n\n" +
                        "Esta acción no se puede deshacer.";
        
        int confirmacion = JOptionPane.showConfirmDialog(this,
            mensaje,
            "Confirmar eliminación completa",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
        
        if (confirmacion == JOptionPane.YES_OPTION) {
            eliminarEmpleadoCompleto(empleadoAEliminar, model, filaSeleccionada);
        }
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
            "Error al procesar la eliminación: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
            
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // llamar al metodo estatico de la clase inicioAdmi para que se pueda mandar a llamar a un panel
        //con un boton que hace referencia a otro panel en la clase de pacientesC
           
           MainAdmin.showJpane(new agregarEmpleado());
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String textoBusqueda = txtBuscador.getText().trim();
    
    if (textoBusqueda.isEmpty()) {
        // Si no hay texto, mostrar todos los empleados
        cargarEmpleados();
        return;
    }
    
    // Filtrar empleados que coincidan con la búsqueda
    DefaultTableModel model = (DefaultTableModel) emple.getModel();
    model.setRowCount(0);
    
    List<Empleado> empleadosFiltrados = empleados.stream()
        .filter(emp -> 
            emp.getNombre().toLowerCase().contains(textoBusqueda.toLowerCase()) ||
            emp.getApellidos().toLowerCase().contains(textoBusqueda.toLowerCase()) ||
            String.valueOf(emp.getIdEmpleado()).contains(textoBusqueda)
        )
        .collect(Collectors.toList());
    
    if (empleadosFiltrados.isEmpty()) {
        JOptionPane.showMessageDialog(this,
            "No se encontraron empleados que coincidan con: " + textoBusqueda,
            "Sin resultados",
            JOptionPane.INFORMATION_MESSAGE);
        cargarEmpleados(); // Volver a mostrar todos
        return;
    }
    
    // Mostrar empleados filtrados
    empleadosFiltrados.forEach(emplead -> {
        String turno = emplead.getTurnoCollection().stream()
            .map(tur -> tur.getIdTurnoTipo().getDescripcion())
            .collect(Collectors.joining(", "));
        
        model.addRow(new Object[]{
            emplead.getIdEmpleado(),
            emplead.getNombre(),
            emplead.getApellidos(),
            turno,
            emplead.getIdUsuario().getIdRol().getIdRol(),
            emplead.getIdUsuario().getContrasena()
        });
    });
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscadorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JScrollPane calendario;
    private javax.swing.JPanel contenido;
    private javax.swing.JTable emple;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtBuscador;
    // End of variables declaration//GEN-END:variables
}
